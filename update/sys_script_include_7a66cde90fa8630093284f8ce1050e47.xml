<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_122630_kpn_siam.kpnSiamUtils</api_name>
        <client_callable>false</client_callable>
        <description>KPN SIAM Script Includes&#13;
&#13;
Make sure the following tables have cross scope access enabled: &#13;
- sc_cat_item (create &amp; update)&#13;
- etc.</description>
        <name>kpnSiamUtils</name>
        <script><![CDATA[var kpnSiamUtils = Class.create();
kpnSiamUtils.prototype = {
	initialize: function() {
		
	},
	sendSiamRequest: function(requestedItem) {
		// TBD
		// This function sends the information from the current requested Item
		// to the SIAM instance. Once the information is send the SIAM instance
		// will update the state of the current record
		var debug = true;
		
		// Get the URL property
		var siamUrl = gs.getProperty('x_122630_kpn_siam.kpn.siam.base.url');
		
		// Obtain the URL for the SIAM Instance
		var postUrl = this._createPostURL(siamUrl);

		// Get the catalog sysID from the SIAM Instance
		var siamCatalog = gs.getProperty('x_122630_kpn_siam.kpn.siam.source.catalog.sysid');
		
		// Create the actual request (including the variables)
		var message = this._createMessage(requestedItem);
		var variables = this._createMessageVariables(requestedItem);
		
		// TBD fill the variables
		
		// TBD Post the request to the SIAM instance
		rm = new sn_ws.RESTMessageV2('SIAM Catalog Items', 'post_request');
		rm.setEndpoint(postUrl);
		
		// Execute the API call
		var syncResponse = rm.execute();
	},
	
	syncCatalogItems: function() {
		var debug = true;
		// Get the URL property
		var siamUrl = gs.getProperty('x_122630_kpn_siam.kpn.siam.base.url');
		
		// Obtain the URL for the SIAM Instance
		var catalogUrl = this._createCatalogURL(siamUrl);
		
		// Get the catalog sysID from the SIAM Instance
		var siamCatalog = gs.getProperty('x_122630_kpn_siam.kpn.siam.source.catalog.sysid');
		// Get the category sysID from the SIAM Instance
		var siamCategory = gs.getProperty('x_122630_kpn_siam.kpn.siam.source.catalog.category.sysid');
		
		// Get the list of catalog items
		var restMessage = new sn_ws.RESTMessageV2('SIAM Catalog Items', 'get_catalog_items');
		restMessage.setEndpoint(catalogUrl);
		restMessage.setStringParameter('sysparm_catalog',siamCatalog);
		restMessage.setStringParameter('sysparm_category',siamCategory);
		
		// Execute the API call
		var syncResponse = restMessage.execute();
		
		// If Catalog Items have been received withoout errors
		// check whether they exist in this ServiceNow environment
		if (!syncResponse.haveError()) {
			var items = JSON.parse(syncResponse.getBody());
			
			for (var i=0; i < items.result.length; i++) {
				var element = items.result[i];
				
				// Get the full definition of the catalog item from the SIAM Instance
				var siamItem = this._getSiamItem(element.sys_id,siamUrl);
				
				// and determine whether the catalog item already exists using the catalog item name
				var catItem = this._catItemExists(element.sys_id,siamCatalog);
				
				if (!catItem) {
					if (debug) {gs.info('7. Create a new Catalog Item');
					}
					// Create a new catalog item using the sys_id from the SIAM instance
					var custItemId = this._createCatItem(siamItem,siamUrl);
				} else {
					if (debug) {gs.info('8. Update existing Catalog Item');
					}
					// Update the catalog item using the data from the SIAM Instance
					// (if any changes have been made)
					var siamItemFull = this._getFullSiamItem(siamItem);
					this._updateCatItem(siamItemFull,catItem,siamUrl);
				}
			}
		}
	},
	
	_createCatalogURL: function(baseUrl) {
		// Create the URL based on the baseUrl and the fixed part
		// Complete with the catalog API
		var siamUrl = baseUrl;
		siamUrl += '/api/sn_sc/servicecatalog/items';
		
		return siamUrl;
	},
	
	_catItemExists: function(itemSysid,siamCatalog) {
		var returnId;
		var checkItem = new GlideRecord('sc_cat_item');
		
		checkItem.addQuery('sys_id',itemSysid);
		checkItem.query();
		if (checkItem.next()) {
			returnId = checkItem.sys_id;
		}
		
		return returnId;
	},
	
	_getSiamItem: function(itemSysid,baseUrl) {
		var debug=true;
		var siamItem = {
		};
		
		var itemUrl = baseUrl;
		itemUrl += '/api/sn_sc/servicecatalog/items/';
		itemUrl += itemSysid;
		
		rm = new sn_ws.RESTMessageV2('SIAM Catalog Items', 'get_catalog_item');
		rm.setEndpoint(itemUrl);
		
		// Execute the API call
		var itemResponse = rm.execute();
		
		// If Catalog Items have been received withoout errors
		// check whether they exist in this ServiceNow environment
		if (!itemResponse.haveError()) {
			var	resultObject = JSON.parse(itemResponse.getBody());
			siamItem = resultObject.result;
		}
		return siamItem;
	},
	
	_createCatItem: function(siamItem,siamUrl) {
		var debug=true;
		var catItemId;
		
		// Obtain the Customer Catalog and Catalog Category from the properties
		// Get the catalog sysID from the Customer Instance
		var custCatalog = gs.getProperty('x_122630_kpn_siam.kpn.siam.customer.catalog.sysid');
		// Get the category sysID from the Customer Instance
		var custCategory = gs.getProperty('x_122630_kpn_siam.kpn.siam.customer.catalog.category.sysid');
		// Get the SIAM Workflow
		var custWorkflow = gs.getProperty('x_122630_kpn_siam.kpn.siam.customer.workflow.sysid');
		
		// Build the catalog item in this environment
		var catItem = new GlideRecord('sc_cat_item');
		catItem.initialize();
		catItem = this._fillCatItem(catItem,siamItem,custCatalog,custCategory,custWorkflow);
		
		// Store the information using the sys_id from the SIAM Instance
		catItem.setNewGuidValue(siamItem.sys_id);
		catItemId = catItem.insert();
		
		// Now loop through the variables for this item
		// and store the variables
		for (var vIdx=0;vIdx < siamItem.variables.length;vIdx++) {
			var siamVariableSysid = siamItem.variables[vIdx].id;
			if (debug) {gs.info('11a. sysid:'+siamVariableSysid);
			}
			var siamVariable = this._getSiamVariable(siamVariableSysid,siamUrl);
			
			// Fill the variable in the Item_option_new table
			var itemVariable = new GlideRecord('item_option_new');
			itemVariable.initialize();
			itemVariable = this._fillVariable(itemVariable,catItemId,siamVariable);
			if (debug) {
				gs.info('12. question:'+itemVariable.question_text);
				gs.info('12. question:'+siamVariable.question_text);
			}
			
			// Store the information
			var itemVarId = itemVariable.insert();
			
			if (siamItem.variables[vIdx].choices) {
				// If choices exist for this variable
				// store the choices for this variable
				if (siamItem.variables[vIdx].choices.length > 0) {
					for (var cIdx=0;cIdx < siamItem.variables[vIdx].choices.length;cIdx++) {
						var siamVarChoice = siamItem.variables[vIdx].choices[cIdx];
						
						// Initialize the choice
						var itemVarChoice = new GlideRecord('question_choice');
						itemVarChoice.initialize();
						
						// Fill the record
						itemVarChoice = this._fillVariableChoice(itemVarChoice,itemVarId,siamVarChoice);
						itemVarChoice.insert();
					}
				}
			}
		}
		
		// Do the same for UI Policies
		
		// Do the same for Client Scipts
		return catItemId;
	},
	
	_updateCatItem: function(siamItem,custItemId,siamUrl) {
		var debug = true;
		// Obtain the Catalog Item from the customer instance
		var custItem = new GlideRecord('sc_cat_item');
		custItem.get(custItemId);
		
		// determine whether changes have been made in the SIAM Instance
		if (this._itemChanged(custItem,siamItem)) {
			if (debug) {gs.info('UPDATE required');
			}
			// An update has been recognized in the SIAM instance
			// update the customer instance with the changes
			custItem = this._fillCatItem(custItem,siamItem,"","","");
			
			// Update the catalog item in this environment
			custItem.update();
		} else {
			if (debug) {gs.info('NO UPDATE required');
			}
		}		
	},
	
	_fillCatItem: function(catItem,siamItem,custCatalog,custCategory,custWorkflow) {
		// we need this to order the requested item
		catItem.name = siamItem.name;
		catItem.short_description = siamItem.short_description;
		catItem.description = siamItem.description;
		catItem.show_price = siamItem.show_price;
		catItem.show_quantity = siamItem.show_quantity;
		catItem.order = siamItem.order;
		
		if (custCatalog != '') {
			catItem.sc_catalogs = custCatalog;
		}
		if (custCategory != '') {
			catItem.category = custCategory;
		}
		if (custWorkflow != '') {
			catItem.workflow = custWorkflow;
		}
		
		return catItem;
	},
	
	_itemChanged: function(custItem,siamItem) {
		// Check whether the siam catalog item is newer then
		// the last update of the customer catalog item
		var returnAnswer = false;
		//gs.info('siam.updated:'+siamItem.sys_updated_on);
		//gs.info('cust.updated:'+custItem.sys_updated_on);
		//if (siamItem.sys_updated_on.getNumericValue() > custItem.sys_updated_on.getNumericValue()) {
			returnAnswer = true;
		//}
		
		return returnAnswer;
	},
	
	_getSiamVariable: function(siamSysId,baseUrl) {
		var debug = true;
		var siamVariable = {
		};
		
		// Get the variable from the SIAM instance using the webservice
		var varUrl = baseUrl;
		varUrl += '/api/now/table/'; // go to the table containing the variables
		varUrl += 'item_option_new/';
		varUrl += siamSysId;
		
		rm = new sn_ws.RESTMessageV2('SIAM ServiceNow Table', 'get_table_entry');
		rm.setEndpoint(varUrl);
		
		// Execute the API call
		var varResponse = rm.execute();
		
		// If Catalog Items have been received withoout errors
		// check whether they exist in this ServiceNow environment
		if (!varResponse.haveError()) {
			var	resultObject = JSON.parse(varResponse.getBody());
			siamVariable = resultObject.result;
		}
		
		var returnVariable = siamVariable;
		
		// return the variable
		return returnVariable;
	},
	
	_fillVariable: function(itemVariable,catItemId,siamVariable) {
		// Link to the Catalog Item
		itemVariable.cat_item = catItemId;
		itemVariable.type = siamVariable.type;
		itemVariable.active = siamVariable.active;
		itemVariable.question_text = siamVariable.question_text;
		itemVariable.tooltip = siamVariable.tooltip;
		itemVariable.example_text = siamVariable.example_text;
		itemVariable.name = siamVariable.name;
		itemVariable.attributes = siamVariable.attributes;
		itemVariable.default_value = siamVariable.value;
		itemVariable.help_tag = siamVariable.help_tag;
		itemVariable.instructions = siamVariable.instructions;
		itemVariable.help_text = siamVariable.help_text;
		itemVariable.order = siamVariable.order;
		if (itemVariable.help_text) {
			itemVariable.show_help = true;
		}
		itemVariable.max_length = siamVariable.max_length;
		itemVariable.mandatory = siamVariable.mandatory;
		itemVariable.read_only = siamVariable.read_only;
		
		return itemVariable;
	},
	
	_fillVariableChoice: function(itemVarChoice,varId,siamVarChoice) {
		// Link to the Catalog Variable
		itemVarChoice.question = varId;
		itemVarChoice.order = siamVarChoice.index;
		itemVarChoice.misc = siamVarChoice.price;
		itemVarChoice.rec_misc = siamVarChoice.recurring_price;
		itemVarChoice.text = siamVarChoice.label;
		itemVarChoice.value = siamVarChoice.value;
		
		return itemVarChoice;
	},
	
	type: 'kpnSiamUtils'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2018-09-14 12:20:37</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>7a66cde90fa8630093284f8ce1050e47</sys_id>
        <sys_mod_count>89</sys_mod_count>
        <sys_name>kpnSiamUtils</sys_name>
        <sys_package display_value="KPN SIAM Service" source="x_122630_kpn_siam">5ce404e10f64630093284f8ce1050e45</sys_package>
        <sys_policy>read</sys_policy>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="KPN SIAM Service">5ce404e10f64630093284f8ce1050e45</sys_scope>
        <sys_update_name>sys_script_include_7a66cde90fa8630093284f8ce1050e47</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2018-09-28 13:37:37</sys_updated_on>
    </sys_script_include>
</record_update>
